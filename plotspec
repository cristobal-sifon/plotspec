#!/usr/bin/env python
# -*- coding: utf-8 -*-
import glob
import os
import pylab
import scipy
import sys
from astropy.io import fits as pyfits
from matplotlib import cm
from numdisplay import zscale
from scipy import interpolate

import matplotlib
matplotlib.rcParams['backend'] = 'GTKAgg'

# default values
path = ''
file1d = ''; file2d = ''
contrast = 0.6; z1 = None; z2 = None
z = 0.; cz = 0.; dv = 0
thresh = 20
title = ''
tickspace = 500
linefill = 0.8
linefile = ''
lheight = 0.2
smooth = 1

# if only one argument is provided, will be assumed to be the filename
# for the 1d spectrum
if len(sys.argv) == 2:
    file1d = sys.argv[1].replace('file1d=', '')

# given in the command line?
for argv in sys.argv:
    if argv[:5] == 'path=':
        path = argv[5:]
    if argv[:7] == 'file1d=':
        file1d = argv[7:]
    if argv[:7] == 'file2d=':
        file2d = argv[7:]
    if argv[:2] == 'z=':
        z = float(argv[2:])
    if argv[:3] == 'cz=':
        cz = float(argv[3:])
    if argv[:3] == 'dv=':
        dv = float(argv[3:])
    if argv[:9] == 'contrast=':
        contrast = float(argv[9:])
    if argv[:7] == 'thresh=':
        thresh = float(argv[7:])
    if argv[:3] == 'z1=':
        z1 = float(argv[3:])
    if argv[:3] == 'z2=':
        z2 = float(argv[3:])
    if argv[:10] == 'tickspace=':
        tickspace = float(argv[10:])
    if argv[:9] == 'linefill=':
        linefill = float(argv[9:])
    if argv[:9] == 'figtitle=':
        title = argv[9:]
    if argv[:9] == 'linefile=':
        linefile = argv[9:]
    if argv[:8] == 'lheight=':
        lheight = float(argv[8:])
    if argv[:7] == 'smooth=':
        smooth = int(argv[7:])
if cz != 0. and z == 0.:
    z = cz / 299792.458

# plot at rest-frame?
rest = False
if '--rest' in sys.argv:
    rest = True
# colors?
bw = False
if '--bw' in sys.argv:
    bw = True
legend = True
if '--no-legend' in sys.argv:
    legend = False

# speed of light, in km/s
c = 2999792.458

# wrap up of all the tasks
def main(path='', file1d='', file2d='', title='', contrast=0.25,
         linefile='', z=0., dv=1000, thresh=20, z1=None, z2=None,
         tickspace=tickspace, linefill=0.8, lheight=0.2, rest=False,
         legend=True, smooth=1, bw=False, cmap=cm.Greys_r):
    if not file1d:
        file1d = raw_input('Enter Filename for the 1d spectrum:\n\t')
    if path:
        file1d = path + file1d
        file2d = path + file2d
    dz = dv / c
    fig = plot(file1d, file2d, title,
               z=z, dz=dz, contrast=contrast, thresh=thresh,
               z1=z1, z2=z2, tickspace=tickspace, linefill=linefill,
               linefile=linefile, lheight=lheight, rest=rest,
               legend=legend, smooth=smooth, bw=bw, cmap=cmap)
    return fig

def plot(file1d, file2d, title='', contrast=0.25, bin=1, z=0., dz=0.0005,
         thresh=20, z1=None, z2=None, tickspace=500, linefill=0.8,
         linefile='', lheight=0.2, rest=False, legend=True,
         smooth=1, bw=False, cmap=cm.Greys_r):
    fig = pylab.figure(facecolor='white')

    # the 1d spectrum
    if file2d:
        box1d = [0.05, 0.12, 0.9, 0.7]
    else:
        box1d = [0.05, 0.12, 0.9, 0.85]
    ax1d = fig.add_axes(box1d, yticklabels=[], xlabel=r'wavelength $(\AA)$')
    # write redshift in box
    if legend:
        annotate_z(ax1d, z, dz)

    # can handle multiple 1d spectra!
    if '*' in file1d:
        file1d = sorted(glob.glob(file1d))
    else:
        file1d = file1d.split(',')
    for i in range(len(file1d)):
        # need an intelligent way to apply shifts
        spectrum = plot1d(file1d[i], ax1d, z, thresh, tickspace, rest,
                          bw, smooth, shift=((-1)**i) * 200 * i)
        # print object name
        if legend:
            print_objectID(ax1d, file1d[i])
    # show line positions
    if '--no-lines' not in sys.argv:
        mark_lines(ax1d, file1d[0], z, dz, linefile, spectrum)
    # the 2d spectrum, which might not be given
    if file2d:
        ax2d = plot2d(fig, ax1d, file2d, z, rest, contrast, z1, z2, cmap=cmap)
    if title:
        pylab.title(title)
    if __name__ == '__main__':
        pylab.show()
    #pylab.savefig('spectrum.png', format = 'png')
    return fig, ax1d, ax2d

#------------------------------------------------------------------------#
#-------------- These three functions are for the 1d box ----------------#
#------------------------------------------------------------------------#
def plot1d(file1d, ax1d, z, thresh, tickspace, rest, bw, smooth, shift=0):
    """
    *shift* is a vertical shift useful when plotting more than one spectrum
    """
    # add .fits extension if not given
    if file1d[-5:] != '.fits' and file1d[-4:] != '.fit':
        file1d += '.fits'
    fits = pyfits.open(file1d)
    wavelength = pix2wave(file1d)
    pix = scipy.arange(1, len(wavelength) + 1)
    data = fits[0].data
    if len(data.shape) == 3:
        spectrum = BadPixels(data[0][0], thresh=thresh)
    else:
        spectrum = BadPixels(data, thresh=thresh)
    fits.close()

    # smooth the spectrum
    if smooth > 1:
        N = int(round(len(wavelength) / smooth, 0))
        pixels = []; spec = []
        j = 0
        for i in range(N):
            use = scipy.arange(j, j + smooth)
            pixels.append(scipy.average(pix[use]))
            spec.append(scipy.average(spectrum[use]))
            j += smooth
        spectrum = interpolate.spline(pixels, spec, pix)
    print pix.shape, spectrum.shape
    if bw:
        ax1d.plot(pix, spectrum + shift, 'k')
    else:
        ax1d.plot(pix, spectrum + shift)
    xticks_loc, xticks_val = ConvertTicks(file1d, wavelength, tickspace,
                                          z, rest)
    ax1d.set_xticks(xticks_loc)
    ax1d.set_xticklabels(xticks_val)
    return spectrum

def annotate_z(ax1d, z, dz):
    annot = 'z = %.4f' %z
    if dz > 0:
        annot += '\ndv = %d km/s' %int(c * dz)
    ax1d.annotate(annot, xy=(0.06, 0.83), xycoords='axes fraction',
                  color='k', fontsize='20')#, family='serif')
    return

def print_objectID(ax1d, fits):
    # add .fits extension if not given
    if fits[-5:] != '.fits' and fits[-4:] != '.fit':
        fits += '.fits'
    head = pyfits.getheader(fits)
    try:
        objID = head['OBJECT']
    except KeyError:
        return
    ax1d.annotate('Object: %s' %objID.replace('_', ' '),
                  xy=(0.06, 0.75), xycoords='axes fraction',
                  color='k', fontsize='20')#, family='serif')
    return

def mark_lines(ax1d, file1d, z, dz, linefile, spectrum):
    # add .fits extension if not given
    if file1d[-5:] != '.fits' and file1d[-4:] != '.fit':
        file1d += '.fits'
    # line labels:
    if linefile:
        if os.path.isfile(linefile):
            lines, linenames = read_lines(linefile)
        else:
            return
    # default lines
    else:
        linenames = ['Lya', 'CIV', 'CIII', 'FeII', 'FeII', \
                     'FeII', 'FeII', 'FeII', 'MgII', 'MgII', \
                     'NeV', '[OII]', 'NeIII', 'Ca-K', 'Ca-H', \
                     'G', 'Hg', 'HeI', 'HeII', 'HeII', \
                     'Hb', '[OIII]', '[OIII]', 'MgII', 'NaI', \
                     'N1', 'Ha', 'N2', 'S1', 'S2']
        lines = [1215.67, 1549.00, 1909.00, 2344.21, 2374.46, \
                 2382.77, 2586.65, 2600.17, 2796.00, 2803.00, \
                 3425.86, 3727.40, 3868.75, 3933.68, 3968.49, \
                 4300.00, 4340.50, 4471.60, 4541.60, 4685.70, \
                 4861.34, 4958.91, 5006.84, 5172.70, 5892.90, \
                 6548.06, 6562.82, 6583.57, 6716.44, 6730.81]
    for i in range(len(lines)):
        # positions of spectral lines in the plot
        linepix = wave2pix(file1d, (1 + z) * lines[i])
        # give each line a width
        if 0 < dz < 1000:
            fillwidth = [wave2pix(file1d, (1 + z - dz) * lines[i]), \
                         wave2pix(file1d, (1 + z + dz) * lines[i])]
            fillx = [fillwidth[0], fillwidth[0], fillwidth[1], fillwidth[1]]
            fillheight = 2 * max(spectrum)
            filly = [-fillheight, fillheight, fillheight, -fillheight]
            ax1d.fill(fillx, filly, str(linefill), edgecolor=str(linefill))
        if dz > 1000 or dz == 0:
            ax1d.axvline(linepix, color='k', ls='--')
        # annotate names:
        #height = lheight * max(spectrum) + \
        height = 0.9 * min(spectrum) + \
                 scipy.median(spectrum) * (1. + (-1) ** i / 4.)
        if bw:
            ax1d.annotate(linenames[i], xy=(linepix+10,height), color='k')
        else:
            ax1d.annotate(linenames[i], xy=(linepix+10,height), color='r')
    return

#------------------------------------------------------------------------#
#------------------------------------------------------------------------#

def plot2d(fig, ax1d, file2d, z, rest, contrast, z1, z2, cmap=cm.Greys_r):
    # add .fits extension if not given
    if file2d[-5:] != '.fits' and file2d[-4:] != '.fit':
        file2d += '.fit'
        if not os.path.isfile(file2d):
            file2d += 's'
    fits = pyfits.open(file2d)
    img = fits[0].data
    fits.close()
    if not z1:
        z1, blah = zscale.zscale(img, contrast=contrast)
    if not z2:
        blah, z2 = zscale.zscale(img, contrast=contrast)
    height = 0.001 * img.shape[0]
    if height < 150:
        box2d = [0.05, 0.92 - height / 2, 0.9, height]
    else:
        box2d = [0.05, 0.825, 0.9, 0.15]
    ax2d = fig.add_axes(box2d, sharex=ax1d, yticks=[])
    ax2d.imshow(img, aspect='auto', vmin=z1, vmax=z2, cmap=cmap)
    ax2d.set_ylim(0, img.shape[0])
    wavelength = pix2wave(file2d)
    xticks_loc, xticks_val = ConvertTicks(file2d, wavelength, tickspace,
                                          z, rest)
    ax2d.set_xticks(xticks_loc)
    ax2d.set_xticklabels(xticks_val)
    return ax2d

def read_lines(file):
    lines = []
    linenames = []
    f = open(file)
    for line in f:
        if line[0] != '#':
            line = line.split()
            lines.append(float(line[0]))
            try:
                linenames.append(line[1])
            except IndexError:
                linenames.append('')
    return lines, linenames

def to_restframe(z, wave):
    return wave / (1 + z)

def ConvertTicks(file2dfile, wave, tickspace=500, z=0, rest=False):
    if rest:
        tickspace = 500 * (1 + z)
    N = len(wave)
    ticks_loc = []
    ticks_val = []
    wavemin = min(wave)
    wavemax = max(wave)
    tick_min = int(wavemin + (tickspace - wavemin%tickspace))
    Nticks = int((wavemax - wavemin) / tickspace)
    for i in range(Nticks + 1):
        ticks_val.append(int(tick_min + i * tickspace))
        ticks_loc.append(wave2pix(file2dfile, ticks_val[i]))
    ticks_val = scipy.array(ticks_val)
    if rest:
        for i in range(Nticks + 1):
            # it is always (apparently) barely less than the
            # round number (e.g., 4999.3)
            ticks_val[i] = int(ticks_val[i] / (1 + z)) + 1
    ticks_loc = scipy.array(ticks_loc)
    return ticks_loc, ticks_val

def pix2wave(specfilename, refpix_key='CRPIX1', refwave_key='CRVAL1',
             slope_key='CD1_1', Npix_key='NAXIS1'):
    specfile = pyfits.open(specfilename)
    head = specfile[0].header
    refpix = head[refpix_key]
    refwave = head[refwave_key]
    slope = head[slope_key]
    Npix = head[Npix_key]
    specfile.close()
    t = scipy.arange(1, Npix + 1)
    return slope * (t - refpix) + refwave

def wave2pix(specfilename, wave, refpix_key='CRPIX1', refwave_key='CRVAL1',
             slope_key='CD1_1'):
    """
    Returns the pixel value at which the wavelength equals wave (most
    likely not an integer)
    """
    specfile = pyfits.open(specfilename)
    head = specfile[0].header
    refpix = head[refpix_key]
    refwave = head[refwave_key]
    slope = head[slope_key]
    specfile.close()
    return (wave - refwave) / slope + refpix

def getWaveValue(specfilename, pix, refpix_key='CRPIX1',
                 refwave_key='CRVAL1', slope_key='CD1_1'):
    specfile = pyfits.open(specfilename)
    head = specfile[0].header
    refpix = head[refpix_key]
    refwave = head[refwave_key]
    slope = head[slope_key]
    specfile.close()
    return slope * (pix - refpix) + refwave

def BadPixels(spectrum, niter=3, add_local=10, thresh=20):
    """
    If a number of pixels in the 1d spectrum have too many counts (given by
    thresh), their values are set to the local average. These counts can still
    be identified in the 2d spectrum, but not in the 1d spectrum, for visual
    aid. Be careful not to remove strong emission lines (by setting a high
    value for thresh).
    """
    Npix = len(spectrum)
    for l in range(niter):
        sigma = scipy.std(spectrum)
        median = scipy.median(spectrum)
        for j in range(1, Npix - 1):
            if abs(spectrum[j]) > thresh * median:
               local = []
               if abs(spectrum[j]) > abs(median - sigma):
                   for k in range(add_local / 2):
                       try:
                           local.append(spectrum[j - k])
                       except IndexError:
                           pass
                   for k in range(add_local / 2):
                       try:
                           local.append(spectrum[j - k])
                       except IndexError:
                           pass
                   local = scipy.median(local)
                   spectrum[j] = local
    return spectrum

# introduction -- please don't delete
#print ''
#print '\t**********************************************'
#print '\t*                                            *'
#print '\t*                  plotspec                  *'
#print '\t*                                            *'
#print '\t*             by Cristobal Sifon             *'
#print '\t*             Leiden Observatory             *'
#print '\t*           May, 2011 - Oct, 2014            *'
#print '\t*                                            *'
#print '\t* ------------------------------------------ *'
#print '\t*          sifon@strw.leidenuniv.            *'
#print '\t*   http://home.strw.leidenuniv.nl/~sifon/   *'
#print '\t**********************************************'
#print ''

if __name__ == '__main__':
    main(path, file1d, file2d,
         title, contrast, linefile, z, dv,
         thresh, z1, z2, tickspace, linefill, lheight,
         rest, legend, smooth, bw)

